{
  "openapi": "3.0.0",
  "info": {
    "title": "node-express-boilerplate API documentation",
    "version": "1",
    "license": {
      "name": "UNLICENSED",
      "url": "localhost:8080"
    }
  },
  "components": {
    "schemas": {
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MongoBase"
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email"
              },
              "name": {
                "type": "string"
              },
              "role": {
                "type": "string",
                "enum": ["user", "admin"]
              }
            },
            "example": {
              "_id": "5ebac534954b54139806c112",
              "email": "fake@example.com",
              "name": "fake name",
              "role": "user"
            }
          }
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg",
          "expires": "2020-05-12T16:18:04.793Z"
        }
      },
      "Project": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MongoBase"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "sponsor": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        ]
      },
      "Application": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MongoBase"
          },
          {
            "type": "object",
            "properties": {
              "project": {
                "$ref": "#/components/schemas/Project"
              },
              "student": {
                "$ref": "#/components/schemas/User"
              },
              "status": {
                "$ref": "#/components/schemas/ApplicationStatus"
              }
            }
          }
        ]
      },
      "PaginatedResponse": {
        "type": "object",
        "properties": {
          "docs": {
            "type": "array",
            "description": "Array of documents",
            "items": {}
          },
          "totalDocs": {
            "type": "number",
            "description": "Total number of documents in collection that match a query"
          },
          "limit": {
            "type": "number",
            "description": "Limit that was used"
          },
          "hasPrevPage": {
            "type": "boolean",
            "description": "Availability of prev page."
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Availability of next page."
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages."
          },
          "offset": {
            "type": "number",
            "description": "Only if specified or default page/offset values were used"
          },
          "prevPage": {
            "type": "number",
            "description": "Previous page number if available or NULL",
            "nullable": true
          },
          "nextPage": {
            "type": "number",
            "description": "Next page number if available or NULL",
            "nullable": true
          },
          "pagingCounter": {
            "type": "number",
            "description": "The starting index/serial/chronological number of first document in current page. (Eg: if page=2 and limit=10, then pagingCounter will be 11)"
          }
        }
      },
      "MongoBase": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApplicationStatus": {
        "type": "string",
        "enum": ["pending", "accepted", "rejected"]
      },
      "AuthTokens": {
        "type": "object",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/Token"
          },
          "refresh": {
            "$ref": "#/components/schemas/Token"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "DuplicateEmail": {
        "description": "Email already taken",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 400,
              "message": "Email already taken"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 401,
              "message": "Please authenticate"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 403,
              "message": "Forbidden"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 404,
              "message": "Not found"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register as user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password", "role"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "must be unique"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "At least one number and one letter"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["sponsor", "student"],
                    "description": "must be either sponsor or student"
                  },
                  "studentFields": {
                    "type": "object",
                    "description": "required if role is student",
                    "properties": {
                      "school": {
                        "type": "string"
                      },
                      "graduationYear": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": {
                  "name": "fake name",
                  "email": "fake@example.com",
                  "password": "password1",
                  "role": "student",
                  "studentFields": {
                    "school": "University of California",
                    "graduationYear": 2020
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "tokens": {
                      "$ref": "#/components/schemas/AuthTokens"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DuplicateEmail"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                },
                "example": {
                  "email": "fake@example.com",
                  "password": "password1"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "tokens": {
                      "$ref": "#/components/schemas/AuthTokens"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid email or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": 401,
                  "message": "Invalid email or password"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["refreshToken"],
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                },
                "example": {
                  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/auth/refresh-tokens": {
      "post": {
        "summary": "Refresh auth tokens",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["refreshToken"],
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                },
                "example": {
                  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokens"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Forgot password",
        "description": "An email will be sent to reset password.",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                },
                "example": {
                  "email": "fake@example.com"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Reset password",
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The reset password token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["password"],
                "properties": {
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "At least one number and one letter"
                  }
                },
                "example": {
                  "password": "password1"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Password reset failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": 401,
                  "message": "Password reset failed"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "summary": "Get current user",
        "description": "Get current user's information.",
        "tags": ["Auth", "Permission: sponsor", "Permission: student"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/users": {
      "post": {
        "summary": "Create a user",
        "description": "Only admins can create other users.",
        "tags": ["Disabled"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password", "role"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "must be unique"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "At least one number and one letter"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["user", "admin"]
                  }
                },
                "example": {
                  "name": "fake name",
                  "email": "fake@example.com",
                  "password": "password1",
                  "role": "user"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DuplicateEmail"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "get": {
        "summary": "Get all users",
        "description": "Only admins can retrieve all users.",
        "tags": ["Disabled"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "User name"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            },
            "description": "User role"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string"
            },
            "description": "sort by query in the form of field:desc/asc (ex. name:asc)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10
            },
            "description": "Maximum number of users"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse",
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get a user",
        "description": "Logged in users can fetch only their own user information. Only admins can fetch other users.",
        "tags": ["Disabled"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "summary": "Update a user",
        "description": "Logged in users can only update their own information. Only admins can update other users.",
        "tags": ["Disabled"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "must be unique"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "At least one number and one letter"
                  }
                },
                "example": {
                  "name": "fake name",
                  "email": "fake@example.com",
                  "password": "password1"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/DuplicateEmail"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Logged in users can delete only themselves. Only admins can delete other users.",
        "tags": ["Disabled"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User id"
          }
        ],
        "responses": {
          "200": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/project": {
      "get": {
        "description": "Get all projects, with optional query params. Params to be implemented.",
        "tags": ["Project"],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Project name"
          },
          {
            "in": "query",
            "name": "sponsorName",
            "schema": {
              "type": "string"
            },
            "description": "Sponsor name"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10
            },
            "description": "Maximum number of users"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse",
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "description": "Create a project",
        "tags": ["Project", "Permission: sponsor"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Used by sponsor to create a project.",
                "required": ["name", "description", "content"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "description": "short description of the object"
                  },
                  "content": {
                    "type": "string",
                    "description": "full description of the object in Markdown"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "description": "Get one project",
        "tags": ["Project"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "description": "Delete a project",
        "tags": ["Project", "Permission: sponsor"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "description": "Partial update a project",
        "tags": ["Project", "Permission: sponsor"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project id"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "description": "short description of the object"
                  },
                  "content": {
                    "type": "string",
                    "description": "full description of the object in Markdown"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/application": {
      "get": {
        "description": "Get applications of current user.",
        "tags": ["Application", "Permission: sponsor", "Permission: student"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/ApplicationStatus"
            },
            "description": "Application status"
          },
          {
            "in": "query",
            "name": "sponsorId",
            "schema": {
              "type": "string"
            },
            "description": "[Admin only] Sponsor's user ID. Sponsors do not need to provide this."
          },
          {
            "in": "query",
            "name": "studentId",
            "schema": {
              "type": "string"
            },
            "description": "[Admin only] Student's user ID. Students do not need to provide this."
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "description": "Filter by project ID"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10
            },
            "description": "Maximum number of applications"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse",
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Application"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "description": "Create an application",
        "tags": ["Application", "Permission: student"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Used by students to create an application.",
                "required": ["projectId"],
                "properties": {
                  "projectId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/application/{id}": {
      "get": {
        "description": "Get one application",
        "tags": ["Not implemented"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Application id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "description": "Delete an application",
        "tags": ["Not implemented"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Application id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "description": "Partial update an application. Used by sponsors to accept/reject applications.",
        "tags": ["Application", "Permission: sponsor"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Application id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Used by sponsors to accept/reject applications.",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/ApplicationStatus"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication"
    },
    {
      "name": "Users",
      "description": "User management and retrieval"
    },
    {
      "name": "Project",
      "description": "Project retrieval"
    },
    {
      "name": "Application",
      "description": "Application management and retrieval"
    },
    {
      "name": "Permission: sponsor",
      "description": "Endpoints that require the user to be a sponsor"
    },
    {
      "name": "Permission: student",
      "description": "Endpoints that require the user to be a student"
    },
    {
      "name": "Not implemented",
      "description": "Endpoints that are not implemented"
    },
    {
      "name": "Disabled",
      "description": "Endpoints that are for future use or testing"
    }
  ]
}
